---
description: Vitest Test Coverage: Guidelines for aiming and measuring test coverage.
globs: **/*.test.ts, **/*.test.tsx
alwaysApply: false
---
# Vitest Test Coverage

## Introduction

Test coverage is a metric that indicates the percentage of your codebase that is executed by your tests. While 100% coverage doesn't guarantee bug-free software, aiming for high coverage and understanding coverage reports are important aspects of a healthy testing strategy. This rule provides guidelines for test coverage with Vitest.

## Guidelines

### 1. Understanding Coverage Metrics

Vitest (typically using `c8` or `istanbul` under the hood) can report coverage for:

-   **Statements**: Percentage of individual code statements executed.
-   **Branches**: Percentage of conditional branches (e.g., `if`/`else` blocks) taken.
-   **Functions**: Percentage of functions called.
-   **Lines**: Percentage of executable lines of code run.

Aim for a balanced understanding across these metrics, with a particular focus on branches, as uncovered branches often hide bugs.

### 2. Setting Coverage Goals

-   **Project-Specific Goals**: The ideal coverage percentage can vary. While aiming high (e.g., 80-90%+) is generally good, focus on covering critical and complex parts of your application thoroughly.
-   **Incremental Improvement**: If starting with low coverage, aim for incremental improvements rather than an immediate jump to a very high target.
-   **Thresholds**: Configure Vitest to enforce coverage thresholds. This can prevent coverage from dropping below a certain level.
    ```json
    // Example in vitest.config.ts or package.json (vitest section)
    {
      "test": {
        "coverage": {
          "provider": "istanbul", // or "c8"
          "reporter": ["text", "json", "html"],
          "statements": 80,
          "branches": 80,
          "functions": 80,
          "lines": 80
        }
      }
    }
    ```

### 3. Analyzing Coverage Reports

-   **HTML Report**: The HTML coverage report is invaluable. It visually highlights covered and uncovered lines, branches, and functions in your codebase.
-   **Identify Gaps**: Use the report to identify critical areas of your code that are not being tested or have low branch coverage.
-   **Prioritize**: Focus on increasing coverage for:
    -   Core business logic.
    -   Complex algorithms or functions.
    -   Code paths that handle errors or edge cases.
    -   Recently changed or bug-prone modules.

### 4. What to Test for Coverage

-   **Happy Paths**: Ensure the main, expected functionality is covered.
-   **Edge Cases**: Test unusual inputs, boundary conditions, and potential failure scenarios.
-   **Error Handling**: Verify that your error handling logic (e.g., `try/catch` blocks, error reporting) is executed and behaves as expected.
-   **Conditional Logic**: Ensure all branches of `if` statements, `switch` cases, and ternary operators are tested.

### 5. What NOT to Over-Focus On (or Exclude)

-   **Trivial Code**: Getters/setters that simply return values or trivial utility functions might not need exhaustive coverage if they are simple and unlikely to break.
-   **Third-Party Code**: You don't need to test third-party libraries themselves (their authors should do that). Focus on your integration with them.
-   **Generated Code**: Code generated by tools might be excluded if it's reliable and testing it provides little value.
-   **Configuration Files/Constants**: Simple constants or configuration objects might not need dedicated tests for coverage.

Use coverage ignore comments (`/* istanbul ignore next */`, `/* c8 ignore next */`, `// v8-coverage-ignore-next-line` etc., depending on the provider) judiciously for lines or blocks that are intentionally not covered and have a good reason for exclusion. Document why something is ignored.

## Generating Coverage Reports

Typically, you run Vitest with a coverage flag:

```bash
npx vitest run --coverage
# or if using npm scripts
npm run test -- --coverage
yarn test --coverage
pnpm test --coverage
```

Check your `vitest.config.ts` or `vite.config.ts` for specific coverage provider settings (e.g., `istanbul` or `c8`).

## Best Practices

-   **Coverage is a Guide, Not a Dogma**: High coverage is good, but well-written tests that verify behavior are more important than just hitting lines of code.
-   **Review Uncovered Code**: Regularly review code sections highlighted by coverage reports as untested. Decide if these gaps represent a risk.
-   **Integrate into CI**: Run coverage checks as part of your Continuous Integration (CI) pipeline and fail the build if thresholds are not met.
-   **Don't Write Tests *Just* for Coverage**: Tests should be meaningful and verify functionality. Artificially inflating coverage with trivial tests is counterproductive.
-   **Refactor for Testability**: If code is hard to cover, it might be a sign that it needs refactoring for better testability (e.g., breaking down large functions, decoupling modules).
